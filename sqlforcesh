#!/usr/bin/python3

import shlex
import readline
import sys
import cmd
import os
import SQLForce
import configparser
import inspect
from beeprint import pp
from terminaltables import SingleTable, AsciiTable, DoubleTable, GithubFlavoredMarkdownTable

class SQLForceShell(cmd.Cmd):
    """ SQL shell for Salesforce using SQLForce python libraries. """
    
    prompt = 'sqlforce> '
    intro = 'SQLForce python shell'

    WATCHED_FILES = [__file__]
    WATCHED_FILES_MTIMES = [(f, os.path.getmtime(f)) for f in WATCHED_FILES]
    READLINE_HISTORY_FILE = os.environ['HOME'] + "/.sqlforcesh-history"
    RC_FILE = os.environ['HOME'] + "/.sqlforceshrc"
    INI_FILE = os.environ['HOME'] + "/.sqlforcesh.ini"

    def __init__(self):
        cmd.Cmd.__init__(self)
        self.config=configparser.ConfigParser()
        self.config.read(self.INI_FILE)
        self.profile = self.config.sections()[0]
        sys.stderr.write("[using profile " + self.profile +"]\n")
        if os.path.exists(self.READLINE_HISTORY_FILE):
            readline.read_history_file(self.READLINE_HISTORY_FILE)
        if os.path.exists(self.RC_FILE):
            with open(self.RC_FILE) as f:
                self.cmdqueue.extend(f.read().splitlines())

    def postcmd(self, stop, line):
        if line != "quit":
            for f, mtime in self.WATCHED_FILES_MTIMES:
                if os.path.getmtime(f) > mtime:
                    self.do_restart("source changed")
        return stop

    def run_command(self, cmd):
        ret = self.session.runCommands(cmd)
        if ( not ret.successful ):
            sys.stderr.write('command failed: ' + cmd +"\n" +
                             '                ' + ret.message)
        else:
            sys.stdout.write(self.session.getenv('ROW_COUNT') + " records\n")

    def postloop(self):
        readline.write_history_file(self.READLINE_HISTORY_FILE)

    def do_reload(self, line):
        return self.do_restart(line)

    def do_restart(self, line):
        """ restart
            Restart the shell, reloading any changes to the source.
            """
        msg = "[restarting"
        if line != "":
            msg += ": " + line
        msg += "]"
        sys.stdout.write(msg+"\n")
        readline.write_history_file(self.READLINE_HISTORY_FILE)
        os.execvp(__file__,sys.argv)

    def do_quit(self, line):
        """ quit
            Exits the shell.
            """
        return True

    def do_EOF(self, line):
        """ EOF
            Quits the shell.
            """
        return True

    def do_profile(self, line):
        """ profile [profile-name]
            Shows available profiles, or if specified sets the currently used profile.
            """

        try:
            if line == "":
                sys.stderr.write("Available profiles:\n")
                for profile in self.config.sections():
                    sys.stderr.write("\t"+profile)
                sys.stderr.write("\n")
            else:
                if line in self.config.sections():
                    self.profile=line
                    self.do_connect("");
                else:
                    sys.stderr.write(line + ": no such profile")
        except Exception as e:
            sys.stderr.write(e.message+"\n")

    def do_set(self, line):
        """ set variable value
            Sets the internal state variable to the specified value.
            """
        try:
            if line == "":
                self.do_help("set")
                return
            (var, val) = shlex.split(line)
            self.config.set(self.profile, var, val)
            sys.stderr.write(self.profile + ": " + var + "=" + val + "\n")
            cfgfile=open(self.INI_FILE,'w')
            self.config.write(cfgfile)
            cfgfile.close()
        except Exception as e:
            sys.stderr.write(e.message + "\n")

    def do_env(self, line):
        """ env
            Print internal state variables.
            """
        try:
            sys.stderr.write("["+self.profile+"]\n")
            for key in self.config[self.profile]:
                sys.stderr.write(key+"="+self.config[self.profile][key]+"\n")
        except Exception as e:
            sys.stderr.write(e.message+"\n")

    def do_connect(self, line):
        """ connect
            Establishes connection to Salesforce.
            """
        try:
            self.session = SQLForce.Session(self.config[self.profile]['login_type'],
                    self.config[self.profile]['username'], self.config[self.profile]['password']+
                    self.config[self.profile]['token'])
        except Exception as e:
            sys.stderr.write(e.message+"\n")

    def not_connected(self):
        if not hasattr(self, 'session'):
            sys.stderr.write("not connected; use \"connect\" first\n")
            return True
        else:
            return False

    def parse_head(self, base, prop, val, dataline):
        if type(val).__name__=='_SQLForceRecordColumn':
            for prop2,val2 in vars(val).items():
                self.parse_head(prop, prop2, val2, dataline)
        else:
            if base != "":
                base += "."
            dataline.append(base + prop)

    def parse_val(self, base, prop, val, dataline):
        if type(val).__name__=='_SQLForceRecordColumn':
            for prop2, val2 in vars(val).items():
                self.parse_val(prop, prop2, val2, dataline)
        else:
            dataline.append(val)

    def do_select(self, line):
        """ SELECT [query]
            Perform SOQL select query
            """
        if self.not_connected(): return

        try:
            if line == "":
                self.do_help("select")
                return
            data=[]
            counting = False
            count=0
            if line.startswith('count()'):
                line = line.replace('count()', 'Id', 1)
                counting = True
            for rec in self.session.selectRecords("SELECT " + line):
                if count==0: # in parsing the first row grab column headings
                             # for the data table
                    dataline=[]
                    for prop,val in vars(rec).items():
                        if prop[0]=='_': # skip the table name
                            continue
                        self.parse_head("", prop, val, dataline)
                    data.append(dataline)
                dataline=[]
                for prop, val in vars(rec).items(): # now read the actual data
                    if prop[0] == '_': # skipping the table name
                        continue
                    self.parse_val("", prop, val, dataline)
                data.append(dataline)
                count=count+1

            if self.config[self.profile]['table'] == 'ascii':
                table = AsciiTable(data)
            elif self.config[self.profile]['table'] == 'markdown':
                table = GithubFlavoredMarkdownTable(data)
            elif self.config[self.profile]['table'] == 'double':
                table = DoubleTable(data)
            else:
                table = SingleTable(data)
            if not counting:
                sys.stdout.write(table.table+"\n")
            sys.stdout.write(str(count) + " records\n")
        except Exception as e:
            sys.stderr.write(str(e)+"\n")

    def do_describe(self, line):
        """ describe [object]
            Describe fields in [object]
            """
        if self.not_connected(): return

        try:
            if line == "":
                self.do_help("describe")
                return
            data=[]
            data.append(['Field Name', 'Type'])
            fields = self.session.describeTable(line)
            for field in fields:
                data.append([field.name,field.type])
            table = SingleTable(data)
            sys.stdout.write(table.table+"\n")
        except Exception as e:
            sys.stderr.write(str(e)+"\n")

    def do_insert(self, line):
        """ INSERT into [table] (column[, column]*) VALUES(v1[,v2]*),[,([v1],[v2]*)]*
            Inserts the provided values into the specified table.
            """
        if self.not_connected(): return

        try:
            if line == "":
                self.do_help("insert")
                return
            self.run_command("INSERT " + line)
        except Exception as e:
            sys.stderr.write(str(e)+"\n")

    def do_update(self, line):
        """ UPDATE [table] SET col=val[, col=val] WHERE [condition]
            Updates the specified columns with the specified values.  NOTE that
            "val" values MUST BE CONSTANTS and will ALWAYS be interpreted as such.
        """
        if self.not_connected(): return

        try:
            if line == "":
                self.do_help("update")
                return
            self.run_command('UPDATE ' + line)
        except Exception as e:
            sys.stderr.write(str(e)+"\n")

    def do_delete(self, line):
        """ DELETE FROM [table] WHERE [condition]
            Deletes the rows matching [condition] from [table].
            """
        if self.not_connected(): return
        try:
            if line == "":
                self.do_help("delete")
                return
            self.run_command("DELETE " + line)
        except Exception as e:
            sys.stderr.write(str(e)+"\n")

if __name__ == '__main__':
    SQLForceShell().cmdloop()
