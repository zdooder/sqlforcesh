#!/usr/bin/python3

import shlex
import readline
import sys
from  cmd2 import Cmd
import os
import SQLForce
import configparser
import inspect
import time
from blessings import Terminal
# from beeprint import pp # only for debugging
from terminaltables import SingleTable, AsciiTable, DoubleTable, GithubFlavoredMarkdownTable

#def exception_info(type, value, tb):
#    if hasattr(sys, 'ps1') or not sys.stderr.isatty():
#        # in interactive mode or no tty, use default processing
#        sys.__excepthook__(type, value, tb)
#    else:
#        import traceback, pdb
#        traceback.print_exception(type, value, tb)
#        print
#        # start the debugger
#        pdb.post_mortem(tb)
#
#sys.excepthook = exception_info

t = Terminal()

class SQLForceShell(Cmd):
    """ SQL shell for Salesforce using SQLForce python libraries. """
    
    version = "0.56"
    prompt = '\001{t.bold_bright_green}\002sqlforce\001{t.bold_bright_cyan}\002>\001{t.normal}\002 '.format(t=t)
    intro = ('{t.bold_underline_yellow_on_blue}SQLForce python shell v{t.white}' + version + '{t.normal}').format(t=t)

    WATCHED_FILES = [__file__]
    WATCHED_FILES_MTIMES = [(f, os.path.getmtime(f)) for f in WATCHED_FILES]
    READLINE_HISTORY_FILE = os.environ['HOME'] + "/.sqlforcesh-history"
    RC_FILE = os.environ['HOME'] + "/.sqlforceshrc"
    INI_FILE = os.environ['HOME'] + "/.sqlforcesh.ini"

    def __init__(self):
        Cmd.__init__(self)
        self.multilineCommands = [ 'select', 'update', 'delete', 'insert' ]
        self.config=configparser.ConfigParser()
        self.config.read(self.INI_FILE)
        self.profile = self.config.sections()[0]
        sys.stderr.write("[using profile " + self.profile +"]\n")
        if os.path.exists(self.READLINE_HISTORY_FILE):
            readline.read_history_file(self.READLINE_HISTORY_FILE)
        if os.path.exists(self.RC_FILE):
            with open(self.RC_FILE) as f:
                self.cmdqueue.extend(f.read().splitlines())

    def emptyline():
        pass

    def postcmd(self, stop, line):
        if line != "quit":
            for f, mtime in self.WATCHED_FILES_MTIMES:
                if os.path.getmtime(f) > mtime:
                    self.do_restart("source changed")
        return stop

    def error(self, err):
        sys.stderr.write('{t.bright_red}{err}{t.normal}'.format(t=t,err=err))

    def run_command(self, cmd):
        cmd = cmd.replace("!=", "<>")
        cmd = cmd.replace(" ge ", ">=")
        cmd = cmd.replace(" le ", "<=")
        cmd = cmd.replace(" lt ", "<")
        cmd = cmd.replace(" gt ", ">")
        ret = self.session.runCommands(cmd)
        if ( not ret.successful ):
            self.error('command failed: ' + cmd +"\n" +
                             '                ' + ret.message)
        else:
            sys.stdout.write(('{t.bright_green}' + self.session.getenv('ROW_COUNT') + '{t.normal} records\n').format(t=t))

    def postloop(self):
        readline.write_history_file(self.READLINE_HISTORY_FILE)

    def do_reload(self, line):
        return self.do_restart(line)

    def do_restart(self, line):
        """ restart
            Restart the shell, reloading any changes to the source.
            """
        msg = "[restarting"
        if line != "":
            msg += ": " + line
        msg += "]"
        sys.stdout.write(msg+"\n")
        readline.write_history_file(self.READLINE_HISTORY_FILE)
        self.do_disconnect("")
        # SQLForce uses a jetty java process to communicate to SQLForce.
        # If we re-exec ourselves, the atexit() handler to kill that server
        # never gets called, and I don't think that the SQLForceServer module
        # handles having a new server started anyway.  The real problem with this
        # is that the new process has no record of the old java process, so starts
        # a new one and never kills the old one.  For now we'll fudge and manually
        # kill off the java process here.
        try:
            from SQLForce import SQLForceServer
            SQLForceServer.killServer()
            time.sleep(1) # give it a chance to exit
            pid = 1 # prime the loop
            while pid != 0:
                pid,status=os.waitpid(-1,os.WNOHANG) # reap children
                time.sleep(0.1) # in a loop until there are no more
        except ChildProcessError:
            pass
        os.execvp(__file__,sys.argv)

    def do_quit(self, line):
        """ quit
            Exits the shell.
            """
        return True

    def do_EOF(self, line):
        """ EOF
            Quits the shell.
            """
        return True

    def do_profile(self, line):
        """ profile [profile-name]
            Shows available profiles, or if specified sets the currently used profile.
            """

        try:
            if line == "":
                sys.stderr.write("Available profiles:\n")
                for profile in self.config.sections():
                    sys.stderr.write("\t"+profile)
                sys.stderr.write("\n")
            else:
                if line in self.config.sections():
                    self.profile=line
                    self.do_connect("");
                else:
                    self.error(line + ": no such profile\n")
        except Exception as e:
            self.error(e.message+"\n")

    def do_set(self, line):
        """ set variable value
            Sets the internal state variable to the specified value.
            """
        try:
            if line == "":
                self.do_help("set")
                return
            line=line.replace("=", " ") # Because I keep typing "set var=val" instead of "set var val"
            (var, val) = shlex.split(line)
            self.config.set(self.profile, var, val)
            sys.stderr.write(self.profile + ": " + var + "=" + val + "\n")
            cfgfile=open(self.INI_FILE,'w')
            self.config.write(cfgfile)
            cfgfile.close()
        except Exception as e:
            self.error(e.message + "\n")

    def do_env(self, line):
        """ env
            Print internal state variables.
            """
        try:
            sys.stderr.write("["+self.profile+"]\n")
            for key in self.config[self.profile]:
                sys.stderr.write(key+"="+self.config[self.profile][key]+"\n")
        except Exception as e:
            self.error(e.message+"\n")

    def do_connect(self, line):
        """ connect
            Establishes connection to Salesforce.
            """
        try:
            self.session = SQLForce.Session(self.config[self.profile]['login_type'],
                    self.config[self.profile]['username'], self.config[self.profile]['password']+
                    self.config[self.profile]['token'])
        except Exception as e:
            self.error(e.message+"\n")

    def do_disconnect(self, line):
        """ disconnect
            Disconnects and logs out from Salesforce.
            """
        try:
            self.session.logout()
        except Exception as e:
            self.error(e.message+"\n")

    def not_connected(self):
        if not hasattr(self, 'session'):
            self.error("not connected; use \"connect\" first\n")
            return True
        else:
            return False

    def parse_head(self, base, prop, val, dataline):
        if type(val).__name__=='_SQLForceRecordColumn':
            for prop2,val2 in vars(val).items():
                self.parse_head(prop, prop2, val2, dataline)
        else:
            if base != "":
                base += "."
            dataline.append(base + prop)

    def parse_val(self, base, prop, val, dataline):
        if type(val).__name__=='_SQLForceRecordColumn':
            for prop2, val2 in vars(val).items():
                self.parse_val(prop, prop2, val2, dataline)
        else:
            if val == None:
                val = ''
            dataline.append(val)

    def do_table2apex(self, line):
        """ TABLE2APEX
            Takes next set of input and formats each line as an element in an APEX List<> object.
        """
        try:
            sys.stdout.write("Enter data, one item per line, end with \".\" along on a line.\n===\n")
            lines = []
            while True:
                line = sys.stdin.readline()
                line = line.strip("\r\n")
                if len(line) == 0:
                    continue
                if line == '.':
                    break
                lines.append(line)

            sys.stdout.write("\n===\n")
            for group in (lines[pos:pos+250] for pos in range(0, len(lines), 250)):
                sys.stdout.write("{'" + "','".join(group) + "'}\n")
        except Exception as e:
            self.error(str(e)+"\n")

    def do_table2sql(self, line):
        """ TABLE2SQL
            Takes next set of input and formats each line as an element in an SQL "IN" statement, in preparation
            to be included in an SQL Query.
            """
        try:
            sys.stdout.write("Enter data, one item per line, end with \".\" alone on a line.\n===\n")
            lines = [];
            while True:
                line = sys.stdin.readline()
                line = line.strip("\n\r")
                if len(line) ==0:
                    continue
                if line == '.': 
                    break
                lines.append(line)

            sys.stdout.write("\n===\n")
            for group in (lines[pos:pos+250] for pos in range(0, len(lines), 250)):
                sys.stdout.write("IN ('" + "','".join(group) + "')\n");
        except Exception as e:
            self.error(str(e)+"\n")

    def getTable(self, data):
        if self.config[self.profile]['table'] == 'ascii':
            table = AsciiTable(data)
        elif self.config[self.profile]['table'] == 'markdown':
            table = GithubFlavoredMarkdownTable(data)
        elif self.config[self.profile]['table'] == 'double':
            table = DoubleTable(data)
        elif self.config[self.profile]['table'] == 'single':
            table = SingleTable(data)
        else:
            sep = ''
            maxlen = '{:' + str(max([max(len(elem) for elem in row) for row in data])+1) + '}'
            if self.config[self.profile]['table'] == 'csv':
                sep=','
                maxlen = '{}'
                # FIXME doesn't handle csv escapes yet
            # The the largest entry in the data
            # build a table from the data
            table = type('', (), {})
            table.table = '\n'.join([sep.join([maxlen.format(item) for item in row]) for row in data])
        return table

    def do_select(self, line):
        """ SELECT [query]
            Perform SOQL select query
            """
        if self.not_connected(): return

        try:
            if line == "":
                self.do_help("select")
                return
            line = line.replace("!=", "<>")
            line = line.replace(" ge ", ">=")
            line = line.replace(" le ", "<=")
            line = line.replace(" lt ", "<")
            line = line.replace(" gt ", ">")
            data=[]
            counting = False
            count=0
            if line.startswith('count()'):
                line = line.replace('count()', 'Id', 1)
                counting = True
            for rec in self.session.selectRecords("SELECT " + line):
                if count==0: # in parsing the first row grab column headings
                             # for the data table
                    dataline=[]
                    for prop,val in vars(rec).items():
                        if prop[0]=='_': # skip the table name
                            continue
                        self.parse_head("", prop, val, dataline)
                    data.append(dataline)
                dataline=[]
                for prop, val in vars(rec).items(): # now read the actual data
                    if prop[0] == '_': # skipping the table name
                        continue
                    self.parse_val("", prop, val, dataline)
                data.append(dataline)
                count=count+1

            if count>0 and not counting:
                table = self.getTable(data)
                sys.stdout.write(table.table+"\n")
            sys.stdout.write(str(count) + " records\n")
        except Exception as e:
            self.error(str(e)+"\n")

    def do_describe(self, line):
        """ describe [object]
            Describe fields in [object]
            """
        if self.not_connected(): return

        try:
            if line == "":
                self.do_help("describe")
                return
            data=[]
            data.append(['Field Name', 'Type'])
            fields = self.session.describeTable(line)
            for field in fields:
                data.append([field.name,field.type])
            table = self.getTable(data)
            sys.stdout.write(table.table+"\n")
        except Exception as e:
            self.error(str(e)+"\n")

    def do_insert(self, line):
        """ INSERT into [table] (column[, column]*) VALUES(v1[,v2]*),[,([v1],[v2]*)]*
            Inserts the provided values into the specified table.
            """
        if self.not_connected(): return

        try:
            if line == "":
                self.do_help("insert")
                return
            self.run_command("INSERT " + line)
        except Exception as e:
            self.error(str(e)+"\n")

    def do_update(self, line):
        """ UPDATE [table] SET col=val[, col=val] WHERE [condition]
            Updates the specified columns with the specified values.  NOTE that
            "val" values MUST BE CONSTANTS and will ALWAYS be interpreted as such.
        """
        if self.not_connected(): return

        try:
            if line == "":
                self.do_help("update")
                return
            self.run_command('UPDATE ' + line)
        except Exception as e:
            self.error(str(e)+"\n")

    def do_delete(self, line):
        """ DELETE FROM [table] WHERE [condition]
            Deletes the rows matching [condition] from [table].
            """
        if self.not_connected(): return
        try:
            if line == "":
                self.do_help("delete")
                return
            self.run_command("DELETE " + line)
        except Exception as e:
            self.error(str(e)+"\n")

if __name__ == '__main__':
    SQLForceShell().cmdloop()
